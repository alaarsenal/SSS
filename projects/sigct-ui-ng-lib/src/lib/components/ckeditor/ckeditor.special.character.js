// IMPORTANT : Customisation des caractères spéciaux pour SIGCT
// Remplacer les par ceux dans le ckedior.js si regénéré.
class tM extends sk {
    init() { const t = this.editor; const e = t.t; t.plugins.get("SpecialCharacters").addItems("Flèches", [{ title: "Flèche gauche", character: "←" }, { title: "Flèche droite", character: "→" }, { title: "Flèche gauche droite", character: "↔" }, { title: "Flèche haut", character: "↑" }, { title: "Flèche bas", character: "↓" }, { title: "Flèche haut bas", character: "↕" }, { title: "Flèche bas gauche", character: "↵" }, { title: e("leftwards double arrow"), character: "⇐" }, { title: e("rightwards double arrow"), character: "⇒" }, { title: e("upwards double arrow"), character: "⇑" }, { title: e("downwards double arrow"), character: "⇓" }, { title: "Double flèche gauche droite", character: "⇔" }, { title: "Double flèche haut bas", character: "⇕" }]); }
}
class eM extends sk {
}
class nM extends sk {
    init() { const t = this.editor; const e = t.t; t.plugins.get("SpecialCharacters").addItems("Mathématique", [ { character: "≤", title: e("Less-than or equal to") }, { character: "≥", title: e("Greater-than or equal to") }, { character: "°", title: e("Degree sign") }, { character: "±", title: e("Plus-minus sign") }, { character: "∑", title: e("N-ary summation") }, { character: "∞", title: e("Infinity") }, { character: "√", title: e("Square root") }, { character: "∼", title: e("Tilde operator") }, { character: "≈", title: e("Almost equal to") }, { character: "≠", title: e("Not equal to") }, { character: "≡", title: e("Identical to") }, { character: "∅", title: e("Empty set") }, { character: "½", title: e("Vulgar fraction one half") }, { character: "⅓", title: "Un tiers" }, { character: "¼", title: e("Vulgar fraction one quarter") }, { character: "⅛", title: "Un huitième" }, { character: "⅔", title: "Deux tiers" }, { character: "¾", title: e("Vulgar fraction three quarters") }, { character: "⅜", title: "Trois huitième" }, { character: "⅝", title: "Cinq huitième" }, { character: "⅞", title: "Sept huitième" }]); }
}
class iM extends sk {
    init() { const t = this.editor; const e = t.t; t.plugins.get("SpecialCharacters").addItems("Grec", [{ character: "Τ", title: "Tau" }, { character: "Υ", title: "Upsilon" }, { character: "Φ", title: "Phi" }, { character: "Χ", title: "Chi" }, { character: "Ψ", title: "Psi" }, { character: "Ω", title: "Omega" }, { character: "α", title: "Alpha" }, { character: "β", title: "Beta" }, { character: "γ", title: "Gamma" }, { character: "δ", title: "Delta" }, { character: "ε", title: "Epsilon" }, { character: "ζ", title: "Zeta" }, { character: "η", title: "Eta" }, { character: "θ", title: "Theta" }, { character: "ι", title: "Iota" }, { character: "κ", title: "Kappa" }, { character: "λ", title: "Lambda" }, { character: "ν", title: "nu" }, { character: "ξ", title: "Xi" }, { character: "ο", title: "Omicron" }, { character: "µ", title: "Mi" }, { character: "π", title: "Pi" }, { character: "ρ", title: "Rho" }, { character: "ς", title: "Sigma" }, { character: "σ", title: "Sigma" }, { character: "τ", title: "Tau" }, { character: "υ", title: "Upsilon" }, { character: "φ", title: "Phi" }, { character: "χ", title: "Chi" }, { character: "ψ", title: "Psi" }, { character: "ω", title: "Omega" }, { character: "ϑ", title: "Theta" }, { character: "ϒ", title: "Gamma" }, { character: "ϖ", title: "Piv" }]); }
}
class oM extends sk {
    init() { const t = this.editor; const e = t.t; t.plugins.get("SpecialCharacters").addItems("Texte", [{ character: "©", title: e("Copyright sign") }, { character: "®", title: e("Registered sign") }, { character: "™", title: e("Trade mark sign") }, { character: "{", title: "Accolade ouverte" }, { character: "}", title: "Accolade fermée" }, { character: "[", title: "Crochet ouvert" }, { character: "]", title: "Crochet fermé" }, { character: "\\", title: "Anti-slash" }, { character: "♀", title: "Féminin" }, { character: "♂", title: "Masculin" }, { character: " ", title: "Espace insécable" }, { character: "‑", title: "Trait union insécable" }, { character: "Œ", title: "Ligature majuscule latine Œ" }, { character: "œ", title: "Ligature minuscule latine œ" }, { character: "æ", title: "Ligature minuscule latine æ" }, { character: "ℓ", title: "Ell" }, { character: "❶", title: "&#10102" }, { character: "❷", title: "&#10103" }, { character: "❸", title: "&#10104" }, { character: "❹", title: "&#10105" }, { character: "❺", title: "&#10106" }, { character: "❻", title: "&#10107" }, { character: "❼", title: "&#10108" }, { character: "❽", title: "&#10109" }, { character: "❾", title: "&#10110" }, { character: "❿", title: "&#10111" }]); }
}

class rM extends sk {
    static get requires() { return [iM, nM, tM, oM, eM]; }
}
